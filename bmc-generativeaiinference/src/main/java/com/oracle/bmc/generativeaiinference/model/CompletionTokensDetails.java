/**
 * Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
package com.oracle.bmc.generativeaiinference.model;

/**
 * Breakdown of tokens used in a completion. <br>
 * Note: Objects should always be created or deserialized using the {@link Builder}. This model
 * distinguishes fields that are {@code null} because they are unset from fields that are explicitly
 * set to {@code null}. This is done in the setter methods of the {@link Builder}, which maintain a
 * set of all explicitly set fields called {@link Builder#__explicitlySet__}. The {@link
 * #hashCode()} and {@link #equals(Object)} methods are implemented to take the explicitly set
 * fields into account. The constructor, on the other hand, does not take the explicitly set fields
 * into account (since the constructor cannot distinguish explicit {@code null} from unset {@code
 * null}).
 */
@jakarta.annotation.Generated(value = "OracleSDKGenerator", comments = "API Version: 20231130")
@com.fasterxml.jackson.databind.annotation.JsonDeserialize(
        builder = CompletionTokensDetails.Builder.class)
@com.fasterxml.jackson.annotation.JsonFilter(
        com.oracle.bmc.http.client.internal.ExplicitlySetBmcModel.EXPLICITLY_SET_FILTER_NAME)
public final class CompletionTokensDetails
        extends com.oracle.bmc.http.client.internal.ExplicitlySetBmcModel {
    @Deprecated
    @java.beans.ConstructorProperties({
        "acceptedPredictionTokens",
        "reasoningTokens",
        "rejectedPredictionTokens"
    })
    public CompletionTokensDetails(
            Integer acceptedPredictionTokens,
            Integer reasoningTokens,
            Integer rejectedPredictionTokens) {
        super();
        this.acceptedPredictionTokens = acceptedPredictionTokens;
        this.reasoningTokens = reasoningTokens;
        this.rejectedPredictionTokens = rejectedPredictionTokens;
    }

    @com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder(withPrefix = "")
    public static class Builder {
        /**
         * When using Predicted Outputs, the number of tokens in the prediction that appeared in the
         * completion.
         */
        @com.fasterxml.jackson.annotation.JsonProperty("acceptedPredictionTokens")
        private Integer acceptedPredictionTokens;

        /**
         * When using Predicted Outputs, the number of tokens in the prediction that appeared in the
         * completion.
         *
         * @param acceptedPredictionTokens the value to set
         * @return this builder
         */
        public Builder acceptedPredictionTokens(Integer acceptedPredictionTokens) {
            this.acceptedPredictionTokens = acceptedPredictionTokens;
            this.__explicitlySet__.add("acceptedPredictionTokens");
            return this;
        }
        /** Tokens generated by the model for reasoning. */
        @com.fasterxml.jackson.annotation.JsonProperty("reasoningTokens")
        private Integer reasoningTokens;

        /**
         * Tokens generated by the model for reasoning.
         *
         * @param reasoningTokens the value to set
         * @return this builder
         */
        public Builder reasoningTokens(Integer reasoningTokens) {
            this.reasoningTokens = reasoningTokens;
            this.__explicitlySet__.add("reasoningTokens");
            return this;
        }
        /**
         * When using Predicted Outputs, the number of tokens in the prediction that did not appear
         * in the completion. However, like reasoning tokens, these tokens are still counted in the
         * total completion tokens for purposes of billing, output, and context window limits.
         */
        @com.fasterxml.jackson.annotation.JsonProperty("rejectedPredictionTokens")
        private Integer rejectedPredictionTokens;

        /**
         * When using Predicted Outputs, the number of tokens in the prediction that did not appear
         * in the completion. However, like reasoning tokens, these tokens are still counted in the
         * total completion tokens for purposes of billing, output, and context window limits.
         *
         * @param rejectedPredictionTokens the value to set
         * @return this builder
         */
        public Builder rejectedPredictionTokens(Integer rejectedPredictionTokens) {
            this.rejectedPredictionTokens = rejectedPredictionTokens;
            this.__explicitlySet__.add("rejectedPredictionTokens");
            return this;
        }

        @com.fasterxml.jackson.annotation.JsonIgnore
        private final java.util.Set<String> __explicitlySet__ = new java.util.HashSet<String>();

        public CompletionTokensDetails build() {
            CompletionTokensDetails model =
                    new CompletionTokensDetails(
                            this.acceptedPredictionTokens,
                            this.reasoningTokens,
                            this.rejectedPredictionTokens);
            for (String explicitlySetProperty : this.__explicitlySet__) {
                model.markPropertyAsExplicitlySet(explicitlySetProperty);
            }
            return model;
        }

        @com.fasterxml.jackson.annotation.JsonIgnore
        public Builder copy(CompletionTokensDetails model) {
            if (model.wasPropertyExplicitlySet("acceptedPredictionTokens")) {
                this.acceptedPredictionTokens(model.getAcceptedPredictionTokens());
            }
            if (model.wasPropertyExplicitlySet("reasoningTokens")) {
                this.reasoningTokens(model.getReasoningTokens());
            }
            if (model.wasPropertyExplicitlySet("rejectedPredictionTokens")) {
                this.rejectedPredictionTokens(model.getRejectedPredictionTokens());
            }
            return this;
        }
    }

    /** Create a new builder. */
    public static Builder builder() {
        return new Builder();
    }

    public Builder toBuilder() {
        return new Builder().copy(this);
    }

    /**
     * When using Predicted Outputs, the number of tokens in the prediction that appeared in the
     * completion.
     */
    @com.fasterxml.jackson.annotation.JsonProperty("acceptedPredictionTokens")
    private final Integer acceptedPredictionTokens;

    /**
     * When using Predicted Outputs, the number of tokens in the prediction that appeared in the
     * completion.
     *
     * @return the value
     */
    public Integer getAcceptedPredictionTokens() {
        return acceptedPredictionTokens;
    }

    /** Tokens generated by the model for reasoning. */
    @com.fasterxml.jackson.annotation.JsonProperty("reasoningTokens")
    private final Integer reasoningTokens;

    /**
     * Tokens generated by the model for reasoning.
     *
     * @return the value
     */
    public Integer getReasoningTokens() {
        return reasoningTokens;
    }

    /**
     * When using Predicted Outputs, the number of tokens in the prediction that did not appear in
     * the completion. However, like reasoning tokens, these tokens are still counted in the total
     * completion tokens for purposes of billing, output, and context window limits.
     */
    @com.fasterxml.jackson.annotation.JsonProperty("rejectedPredictionTokens")
    private final Integer rejectedPredictionTokens;

    /**
     * When using Predicted Outputs, the number of tokens in the prediction that did not appear in
     * the completion. However, like reasoning tokens, these tokens are still counted in the total
     * completion tokens for purposes of billing, output, and context window limits.
     *
     * @return the value
     */
    public Integer getRejectedPredictionTokens() {
        return rejectedPredictionTokens;
    }

    @Override
    public String toString() {
        return this.toString(true);
    }

    /**
     * Return a string representation of the object.
     *
     * @param includeByteArrayContents true to include the full contents of byte arrays
     * @return string representation
     */
    public String toString(boolean includeByteArrayContents) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        sb.append("CompletionTokensDetails(");
        sb.append("super=").append(super.toString());
        sb.append("acceptedPredictionTokens=")
                .append(String.valueOf(this.acceptedPredictionTokens));
        sb.append(", reasoningTokens=").append(String.valueOf(this.reasoningTokens));
        sb.append(", rejectedPredictionTokens=")
                .append(String.valueOf(this.rejectedPredictionTokens));
        sb.append(")");
        return sb.toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof CompletionTokensDetails)) {
            return false;
        }

        CompletionTokensDetails other = (CompletionTokensDetails) o;
        return java.util.Objects.equals(
                        this.acceptedPredictionTokens, other.acceptedPredictionTokens)
                && java.util.Objects.equals(this.reasoningTokens, other.reasoningTokens)
                && java.util.Objects.equals(
                        this.rejectedPredictionTokens, other.rejectedPredictionTokens)
                && super.equals(other);
    }

    @Override
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result =
                (result * PRIME)
                        + (this.acceptedPredictionTokens == null
                                ? 43
                                : this.acceptedPredictionTokens.hashCode());
        result =
                (result * PRIME)
                        + (this.reasoningTokens == null ? 43 : this.reasoningTokens.hashCode());
        result =
                (result * PRIME)
                        + (this.rejectedPredictionTokens == null
                                ? 43
                                : this.rejectedPredictionTokens.hashCode());
        result = (result * PRIME) + super.hashCode();
        return result;
    }
}
